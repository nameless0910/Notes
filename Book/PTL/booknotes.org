* 程序员思维训练
** 绪论
*** 软件是在头脑中创建的
*** 1.1 再提实用
**** 切勿随波逐流
*** 1.2 关注情境
**** 始终关注情景
*** 1.3 所有人都关注这些技能
**** 有些东西是基础的，各领域相通的
** 从新手到专家的历程 
*** 制造问题的思维方式无法解决问题
*** 2.1 新手与专家
**** 清晰表述专业技能十分困难
*** 2.2 Dreyfus 模型的五个阶段
**** 2.2.1 新手
***** 经验很少（经验：通过实施这项技术促进了思维的转变）
***** 新手需要指令清单
***** infinite regression 明确终止反复解释
***** 规则只能让你启程，不会让你走的更远
**** 2.2.2 高级新手
***** 想要快速获取信息 （快速浏览文档寻找方法定义，不想寻根问底，或者温习知识）
***** 不想要全局思维
**** 2.2.3 胜任者
***** 能够建立问题域的概念模型
***** 能够解决问题
**** 2.2.4 精通者
***** 精通者能够自我纠正
***** 学习他人经验
***** 理解和运用经验之谈
***** 知道下一步，没发生要改变什么，哪些计划要取消，应该采取什么行动
***** 有效运用软件模式
**** 2.2.5 专家
***** 不断寻找更好的方法和方式去做事
***** 专家凭直觉工作
***** 知道哪些是无关紧要的细节，哪些是非常重要的细节
*** 2.3 现实中的 Dreyfus 模型
**** 规则断送专家
**** 新手需要被驾驭，专家需要自己去跑 
**** 提升水平的变化
***** 从依赖规则向依赖直觉转变
***** 观念转变，问题不再是相关度等同的所有单元的集合体，而是一个完整和独特的个体，其中只有某些单元是相关的
***** 从问题的旁观者变成问题涉及的系统本身的一部分
**** 直觉和模式匹配的能力超过了显性认知
*** 2.4 有效使用 Dreyfus 模型
**** 积极的实践
***** 需要一个明确定义的任务
***** 任务有适当难度
***** 任务环境可以提供大量反馈，以便于采取行动
***** 提供重复犯错和纠正错误的机会
**** 2.4.1 勇于承担责任
***** 我只是执行命令是无用的
***** 模仿榜样
***** 没有实践就没有技能
***** 模仿-吸收-创新
**** 2.4.2 在实践中保持技能
***** 专家必须持续编程，并找到一个有意义，有价值的职业生涯
*** 2.5 警惕工具陷阱
**** 模型是工具，而非镜子
**** 混淆模型和现实
**** 低估不能形式化的特性
**** 规定违背个人自主性的行为
**** 偏袒新手，从而疏远了经验丰富的员工
**** 阐明太多细节
**** 把复杂局势过于简单化
**** 追求过度一致
**** 忽视情景的细微差别
**** 在遵从规则和自行判断之间犹豫
**** 故弄玄虚
*** 2.6 再一次考虑情境
**** 警惕非情景化的客观性
*** 2.7 日常的 Dreyfus 模型
**** 一种规格并非处处适用
**** 获取专业技能
***** 培养更多的直觉
***** 认识到情境和观察情境模式的重要性
***** 更好的利用我们自己的经验
** 认识大脑
*** 3.1 双 CPU 模式
**** 内存和总线竞争
*** 3.2 随时记录想法
**** 每个人都有好点子
**** 准备好做记录的工具，随身携带
*** 3.3 L 型和 R 型的特征
*** 3.4 R 型的崛起
**** 设计胜于功能
**** 吸引力更有效
**** 美来自选择
*** 3.5 R 型看森林，L 型看树木
*** 3.6 DIY 脑部手术和神经可塑性
**** 不使用就失去
** 利用右脑
*** 4.1 启动感官输入
**** 做触觉游戏缓解疲劳
**** 利用多感官反馈
**** 刺激你的大脑
*** 4.2 用右脑画画
**** 绘画既是观察
**** 限制认知干扰
**** 角色扮演
*** 4.3 促进 R 型到 L 型的转换
**** 建立 R 型到 L 型的转换
**** 如果没有全局的概念就试图记忆细节，会陷入僵局
**** 结对编程
**** 使用随机并列来创建隐喻
**** 提出衍生性隐喻是很困难的
*** 4.4 收获 R 型线索
**** 一切输入都被储存
**** 许多想法是无法用语言描述的
**** 利用图像流
**** 利用自由日记
**** 晨写
**** 自由写
**** 散步
**** 庞加莱的解题技巧
**** R 型只能邀请，不能强制命令
*** 收获模式
**** 代码，一次编写，多次阅读
**** 适应不同技术层次
**** 换换脑子
**** 把问题倒过来
**** 思维枷锁
**** 调和不同的模式
** 调试大脑
*** 5.1 了解认知偏见
**** 思维定式
**** 基本归因错误
**** 自私的偏见
**** 需要定论
**** 认可上的偏见
**** 曝光效应
**** 霍桑效应
**** 虚假记忆
**** 符号约简谬论
**** 名词谬论
**** 柏拉图圈
**** 相关性与因果性
**** 很少不意味没有
**** 绝不说绝不
**** 推迟下结论
**** 通过明确的概率进行猜想
*** 5.2 认清时代影响
**** 重视情境
**** 态度会改变
**** 一种原型创建了其反面类型
*** 5.3 了解个性倾向
*** 5.4 找出硬件问题
**** 蜥蜴逻辑
*** 5.5 现在我不知道该思考什么
**** 你怎么知道的
**** 预期影响现实
***** 
** 主动学习
*** 6.1 学习是什么，不是什么
**** 点燃你的火焰
*** 6.2 瞄准 SMART 目标
**** 目标任务使你更接近目标
**** 具体的
**** 可度量的
**** 可实现的
**** 相关的
**** 时间可控的
*** 6.3 建立一个务实的投资计划
**** 时间是无法创造和销毁的，时间只能被分配
**** 制定具体计划
**** 多样性
**** 所有知识投资都有价值
**** 主动的，而不是被动的投资
**** 定期投资
*** 6.4 使用你的原生学习模式
**** 性格类型 （阅读）
*** 6.5 一起工作，一起学习
*** 6.7 使用 SQ3R 法主动阅读
**** 调查 问题 阅读 复述 回顾
**** 测试驱动学习法
*** 6.8 使用思维导图
**** 写作和阅读一样重要
*** 6.9 利用文档的真正力量
*** 6.10 以教代学
**** 和橡皮鸭聊天
** 积累经验
*** 7.1 为了学习而玩耍
**** 趣味性很重要
*** 7.2 利用现有知识
*** 7.3 正确对待实验中的失败
**** 建立安全探索环境
***** 自由实验
***** 能够原路返回稳定状态
***** 重现任意时刻的工作产品
***** 能够证明进展
*** 7.4 了解内在诀窍
**** 通过探索可以学的更好，而不是指令
*** 7.5 压力扼杀认知
*** 7.6 想象超越观感
*** 7.7 像专家一样学习
** 控制注意力
*** 8.1 提高注意力
**** 如何冥想
*** 8.2 通过分散注意力来集中注意力
*** 8.3 管理知识
**** 利用观感调整收集更多想法
*** 8.4 优化当前情境
**** 需要平均 20 分钟恢复到当前工作
**** 单任务界面
**** GTD
*** 8.5 积极的管理干扰
**** 提高进出情境的成本
**** 为打断做好准备
*** 8.6 保持足够大的情境
**** 使用虚拟桌面
** 超越专家
*** 9.1 有效的改变
**** 制定计划
**** “不作为”是敌人，“错误”不是
**** 给新习惯适应的时间
**** 信念是真实的
**** 采取步步为营的细小步骤
*** 9.2 明天上午做什么
*** 9.3 超越专家
** 诀窍
**** 始终关注情境
**** 新手使用规则，专家使用直觉
**** 知道你不知道什么
**** 通过观察和模仿来学习
**** 保持实践以维持专家水平
**** 如果你需要创造力和直觉，避免使用形式方法
**** 学习如何学习的技能
**** 捕获所有的想法以从中获益更多
**** 综合学习与分析学习并重
**** 争取好的设计
**** 重新连线大脑，坚信这一点并不断实践
**** 增加感官体验以促进大脑的使用
**** R 型开路，L 型紧跟
**** 使用隐喻作为 L 和 R 相融之所
**** 培养幽默感来建立强大的隐喻
**** 离开键盘去解决难题
**** 改变解决问题的角度
**** 很少不意味没有
**** 适应不确定性
**** 信任记录而不是记忆
**** 从多个角度看问题
**** 尊重不同人的不同性格
**** 像高级动物一样，做深呼吸，而不是张嘴嘶鸣
**** 相信直觉，但需要验证
**** 建立 SMART 任务实现你的目标
**** 对主动学习的投资做好计划
**** 发现你的最佳学习设置
**** 组织学习小组学习和辅导
**** 主动阅读
**** 同时使用 R 型 L 型记笔记
**** 写文档的过程比文档本身重要
**** 观察，实践，教学
**** 为了更好的学习，请更好的玩
**** 从相似中学习，从差异中忘却
**** 再环境中安全的探索，创造和应用
**** 观察，不做判断，然后行动
**** 允许失败，你会走向成功
**** 让大脑为成功形成惯例
**** 学习集中注意力
**** 挤出思维的时间
**** 使用 wiki 来管理信息和知识
**** 制定交流规则来管理干扰
**** 少发送邮件，就会少收到邮件
**** 为邮件通信选择你自己的进度
**** 屏蔽中断来保持注意力
**** 使用多台显示器来避免情境切换
**** 优化你的个人工作流以最大化情境
**** 抓住方向盘，你不能自动驾驶
