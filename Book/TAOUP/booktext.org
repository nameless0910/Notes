#+STARUP:context
* Philosophy
- 只提供机制而不提供方针的哲学
- 跨平台可移植性
- Internet 和万维网
- 灵活性
- Unix Hack
- Down-to-top
- Unix 管道发明者 Mcllroy
  1. One Procedure Do One Thing,Don't add new feature to orign procedure
  2. Assum One Output is Other's Input. Avoid serious format.Don't  insist interactive imput
  3. Use dsign and sorfware early,Rewrite clumsy code
  4. Use tools to make things easy firstly
- Pike
  1. Don't change codes until you make sure is the bottleneck
  2. Estimate,and then optimize speed
  3. If n is large,you can consider garish algorithms,base 2
  4. Try to use simple algothms and data structure,Garish algothms are easily having bug
  5. The core of programming is data structure,not algothms
  Note:Ken Thomspon think 4 is important and he told that exhaustion if you don't sure
- Summary of Unix Philosophy
  1. Clean APIs combine simple component
  2. Clearly
  3. Consider combining when you design
     - 以一点点格式解析的代价，换得可以使用通用工具来构造和解读数据流
     - 把尽可能多的编程元素组织为一套定义良好的 API
  4. Separation
     - 将应用按照一个库来编写,应用的控制流程由脚本撰写,like Emacs
     - 将程序分成可以协作的前端和后端进程，通过套接字上层的专用应用协议进行通讯
  5. Clean,Uncomplex
  6. Programming small procedure
  7. Transparent,Design is visible,to debug and examine
     - 程序带有监视和显示内部状态的功能
  8. Strongly
     - Consider large input
     - Avoid exception 
  9. Express, Logical
  10. Popilarity API
  11. Less comment
  12. when have a error,quit immediately,and have enough error message
      - 宽容性
  13. Would rather cost machine one minute,don't waste one second
  14. Avoid hand wirte,Use procedure to produce produce
  15. Have a modeln before optimize
      - 90%的功能现在实现,比 100%的功能永远实现不了好
      - 过早的优化是万恶之源
      - 先能走,再学跑
  16. Variously
  17. Expandly,Design consider fulture
- K.I.S.S
- Use Unix Philosophy
  1. 只要可行,Everything could be done as a filter without source and object
  2. Data flow try to textual
  3. DMS and application protocols textual
  4. Complex front-end separate with back-end
  5. Before use C,Use Interpreted language
  6. When only one language make complexly,Use more language
  7. 宽收严发
  8. when filte message,Don't discard message that couldn't discard
  9. small is beatifully,work and have less feature
- Do when you see
  Note: If you don't which is true,do less work only make sure task finish until you know what is true
- Don't repeat wheel.
- Master tools and make all automation

* History
* Contrasts Unix Philosophy with Others
- 一切皆文件
- 抢先式多任务
- 管道及 IPC 要求把程序间的通讯简化到某一程度而促使功能分离
- 内部边界
  1. 内存管理,用 MMU
  2. 为多用户设置权限组
  3. 涉及关键安全性的功能限制在尽可能小的可信代码块上
- 文件属性和记录结构
  - Unix 全无
  - 另一些用 out-of-band data 将文档文件同能够解读它的 APP 关联,Unix 则使用 APP 识别"特征数"或是文件内的其他类型数据
- 二进制文件格式
  - 即时支持命令行接口,脚本和管道,也几乎无法形成 filter
  - Data file 只有专用工具才能访问
- CLI 很弱导致
  - 程序无法考虑未预料的方式相互协作
  - 远程系统管理难于实现,更依赖网络
  - 简单的非交互程序也导致 GUI 开销或复杂的脚本接口
  - 服务器,守护程序和后台进程几乎无法写出
* Modularity
- 在程序的子程序层上进行模块化
- 封装良好的模块不会
  - 过多披露细节
  - 直接调用其他模块的实现码
  - 胡乱共享全局数据
- 先定义接口,编写简要注释,再开始编写代码
- Brook 定律
- 200 到 400 逻辑行的代码最好
- 紧凑性:有经验的用户通常不需要用户手册
- 正交性
- SPOT
  - 常量,表和元数据应该只声明和初始化一次,并导入其他地方
  - 如果代码有重复数据是因为在两个不同地方,考虑写个函数工具或代码生成程序
  - 文档重复了代码中的知识点,能否从部分代码中生成部分文档
  - 如果头文件和接口声明重复了实现代码中的知识点,是否可以从代码中生成头文件和接口声明
  - 数据结构:No junk,No confusion
- 围绕解决一个定义明确的问题
- 软件分层
  - 自底向上
    1. 能够精确预知程序的任务
    2. 实现中程序规格不会发生大的改变
    3. 在底层,有充分自由来选择程序完成任务的方式
  - 自顶向下:操作在设计时能在不同的物理设备间通用
  - 抽象化硬件 | 围绕某个行为模型组织代码
  - 双管齐下:以 top-to-down 的应用逻辑表达抽象规范,以函数或库来收集底层的域原语
- 胶合层:阻抗匹配(impedance match)
  - 薄胶合层,不要组织一个中间层
  - C
- 库和插件
- OO 将数据结构函数和数据一起封装在可视为单元的一个对象中
  - OO 将人带入过度分层陷阱(抽象子类)
  - 使程序丧失优化机会
- 模块式编码
  - 有多少全局变量
  - 单个模块大小
  - 模块内单个函数大小:函数原型后立即写一行注释
  - 代码是否有内部 API
  - {API 入口,类的方法,数据结构的成员}是否超过 7 个
  - 每个模块入口点数量如何分布
* Textuality
- marshaling unmarshaling
- 互用性,透明性,可拓展性
- 少用二进制协议
- 二进制格式通常指定给定值的分配位数(IPv4 的地址是 32 位,要扩展到 128 位,如 IPv6,就需要大修改)
- 使用二进制唯一理由:大批量数据(大图像和多媒体,延迟有极高要求)
- PNG 标准
- 数据文件元格式
  - DSV(Delimiter-Separated Values)
- XML in a Nutshell[Harold-Means]
- Unix 文本文件格式的约定
  - 如果可能,以新行符结束的每一行只存一个记录
  - 每行不超过 80 字符
  - 使用#引入注释
  - 支持反斜杠约定
  - 使用冒号或者任何连续的空白作为字段分隔符
  - 不要过分区别 TAB 和 whitespace
  - 优先选用 16 进制
  - 复杂记录,采用 stanza 格式,记录多行,用%%\n 或%\n 作为记录分隔符
  - 节格式中,要么每行一个记录字段,妖魔让记录格式用冒号终止的字段名关键字作为引导
  - 节格式支持连续行
  - 要么包含一个版本号,要么将格式设计成相互独立的自描述字节块
  - 注意浮点数取整问题
  - 不要仅对文件的一部分进行压缩或者转换成二进制码
  - end-to-end
  - End-to-End Arguments in System Design[Saltzer]
  - SMTP
  - IMAP
  - 应用协议元格式
    - HTTP
* Transparency 
- 用户:良好的文档 | 程序员:良好的变量和函数名
- 透明性 | 可显性
- gcc(G:回归测试)
- 找到一个方法,可以访问具体细节,有不太显眼
- 不要叠加抽象层
- 问题
  1. 程序调用最大静态深度谨慎大于 4
  2. 代码不变性质
  3. API 各个函数调用是否正交
  4. 是否存在一些顺手可用的关键数据结构或全局唯一的记录器,捕获了系统的高层次状态
  5. 数据结构或分类是否和代表的外部实体清晰一对一对应
  6. 是否容易找到给定函数的代码部分,多大精力读懂
  7. 代码增加了特殊情况还是避免了特殊情况
  8. 有多少 magic number
- 不要过度保护
- 编写 textualizer/浏览器
* Multiprogramming 
- 把程序分解成更简单的子进程
  1. 降低进程生成的开销
  2. 提供方法(shellout,I/O 重定向,管道,消息传递和套接字)简化进程间的通信
  3. 使用能由管道和套接字传递的简单,透明的文本数据格式
- Improving Context Switching Performance of Idle Tasks under Linux[Appleton]
- 线程提高了全局复杂度,尽量避免使用多线程
- 更强的安全性
- setuid bit | boly-on
- Unix Shell As a 4GL[Schaffe-Wolf]
- 管道缺点是单向性
- Wrapper
- Bernstein chaining
- 从进程
  - 两者间涉及的协议无足轻重
  - 应用协议通讯
- 对等进程间通信
  - 临时文件
  - 信号
  - 套接字
  - 共享内存
- 线程:时许依赖(问题) 锁定和解锁成本高
- Why Threads Are a Bad Idea[Ousterhout96]
* Minilanguages
- 设计
  1. 预先认识到可以使用微型语言设计把编程问题的规格说明提升一个层次
  2. 注意带规格说明文件格式越来越类似微型语言
  3. Wrong :n 通过扩展变成微型语言
- XSLT:Mastering XML Transformations[Tidwell]
- syntactic sugar
- Notable Design Patterns for Domain-Specific Languages[Spinellis]
- sandboxed
- 宏-慎用
* Generation
- 数据驱动编程
  - 与 OO 区别
    1. 数据驱动编程中,数据不仅仅是某个对象的状态,实际上还定义了程序的控制流
    2. OO 首先考虑封装,而数据驱动编程看重编写尽可能少的固定代码
  - 内省,metaclass hacking
* Configuration
- 一切皆可配置
- 对于能够可靠的进行自动检测的东西,不要提供配置开关
- 用户不应该看到优化开关
- 增加配置选项
  - 能省掉吗
  - 能否通过改变程序的常规行为从而无需这个选项
  - 少考虑可配置性,多考虑正确性
  - 选项附加的行为是否应该用一个独立的程序来代替
- 风格
  1. #开始的说明性注释
  2. 不区别空白符
  3. 把多个空行和注释行视为单个空行
  4. 词法上把文件视作简单的用空吧分割的标记序列
  5. 支持以字符串语法对待内嵌空白符的标记,使用单或爽引号作为对称的分隔符
  6. 支持\语法
- 可移植性
* Interfaces
- 最小立异原则
- 简洁:表现力,易用,透明和脚本化能力
- 过滤器模式{Cantrip 源 接收器 编译器 ed Roguelike CLI 服务器 基于语言
- 引擎和接口分离}
  - 配置者/执行者
  - 假脱机/守护进程
  - 驱动/引擎
  - 客户端/服务器
- 多价程序模式
* Optimization
- 将空间或者时间复杂度降下来
- 先估量,再优化
- 保持代码短小简单
* Complexity
* Languages
- C/C++以增加实现时间和(特别是)调试时间来优化效率
- Center Question: Programmer manager memory themselves
  - 声明变量 显式管理链表 设置缓冲大小 检测或防止缓冲溢出 分配和回收动态储存
- 使用脚本语言的性能损失微不足道,真实世界的程序往往由 I/O 事件等待,网络延迟以及缓存列填充等限制
- 避免手动管理内存的语言通过运行时向可执行体嵌入一个内存管理器,运行环境分为程序部分及解释器部分,解释器内核由多个程序部分共享
** C
- 要求速度最快且需要实时需求,或与 OS 内核紧密联系
- 必须在多个 OS 上移植
- 尽可能接近裸机,保持稳定
- 在 Unix 间移植 C 几乎总是可行,但在诸如信号和进程控制需要一些技巧
- C 代码生成器从声明的说明规格中为 tokenizer 和语法分析器生成源码,yacc 和 lex
- The C Programming Language[Ritchie]
** C++
- 对后兼容 C 的要求阻碍了 C++完全自动化动态内存管理
- 不成熟的标准化
- OO 方法导致厚重胶合层和维护问题
- 与 LISP 相似的异常:在被处理程序捕捉之前可以沿调用栈向上 pop 出值或对象
- STL 提供了泛型编程
- Use C++ when its library have good method for your application,or OO have large advantage
- The C++ Programming Language[Stroustrup] C++:A Dialog[Heller] C++ Annotations[Brokken]
** Shell
- shell have portable problem:Use many assist instruction
- The Unix Programming Environment[Kernighan-Pike]
** Perl
- Perl 是增强版 shell,为了替代 awk 而设计
- 最强功能是其内置的对文本,面向行的数据格式进行模式导向的处理功能(正则表达式)
- 包含更强大的数据结构,包括混合元素类型的动态数组和支持名-值对应的字典类型
- 完备的 Unix API 支持
- 适合完成简单的 TCP/IP 客户端或者服务器端
- 强大的社区
- 主要缺点:某些{丑陋,复杂,需要谨慎使用}
- Programming Perl[Wall] Learning Perl[Schwartz]
** Tcl 
- 设计用来连入 C 编译库的小型语言解释器,提供 C 代码的脚本控制,也适用与内嵌脚本
- 没有保留字, 在函数调用和内置语言特性间没有语法区别
- 缺点:薄弱的命名空间控制和模块性功能,除关联列表外没有数据结构,很难扩展 Tcl,语法怪异
- Practical Programming in Tcl and Tk[Welch]
- Tcl 解释器的可扩展性,古怪的位置分析器
** Python
- 设计本意是与 C 语言紧密集成
- 出色的模块化特性,类型系统包括动态容器储存对象和关联列表,具有匿名 lambda 对象
- 适合构建协议机器人和网络管理工具(标准发布包括大多数网络协议)
- 由于运行期类型多态导致非常慢
- Programming Python[Lutz]
- 可被 frozen,准编译成纯 c 源码
** Java
- 最初设计目标: write once,run anywhere, 支持网页中嵌入交互程序,可在任何浏览器中运行
- 自动管理内存的优势,支持 OO,保留大量类 C 语法,支持动态载入 C 调用并支持在 C 中把其作为嵌入语言
- 类的可见/不可见区域的规定复杂,接口随避免多继承产生的复杂问题,但并不简单多少
- 内部类和匿名类导致非常混乱的代码
- 缺乏可靠的析构方法,意味内存以外的其他资源,如 mutex 和锁,难以保证得到正确管理
- Unix 的比如信号,poll,select 功能也无法从 Java 主体访问
- Java 没有管理不同库版本的方法
- Jave In A Nutshell[FlanaganJava] Thinking in Java[Eckel]
** Emacs Lisp
- 为开发工具提供前端
- 如何涉及交互编辑特定文件格式或文本数据的 Application,使用其进行原型设计都是最好的
- 适合构建必须和文本编辑器紧密整合
- 自动内存管理 OS 规范为 Emacs 内核
- 狂吃资源(but today is not a problem)
- The GNU Emacs Lisp Reference Mabual[info]  Writing GNU Emacs Extensions[Glickstein]

* Tools
- IDE is well to simple language with less tools
- Programming with GNU Software[Loukides-Oram]
- Learning GNU Emacs[Cameron]
- yacc lex
- make Managing Projects with Make[Oram-Talbot]
- CVS
- gdb
- profiler
- Emacs
* Reuse:On Not REinventing the Wheel
- SourceForge Freshmeat ibiblio
* Portability
- 可移植性和编程语言的选择
  - C:IPC 线程 GUI 接口
    - Recommended C Style and Coding Standards[Cannon] The Practice of Programming[Pike-Kernighan]
  - C++:编译器
  - Shell:大量使用其他他可移植性差的命令和过滤器
  - Perl:插件库
  - Python:次版本号重要
  - Tcl
  - Java:线程
  - Emacs Lisp
- 避免系统依赖性
- autoconf
* Documentation
- troff | Documenter's Workbench | manpage
- TEX
- HTML
- DocBook
* Open Source
- 原则
  1. 源码公开
  2. 尽早发布,经常发布
  3. 给贡献以表扬
- 协同工作
  - 发送针对当前版本代码的非可生成的补丁
  - 文档
  - 不要发送指使优化 RCS 或 SCCS 的补丁段
  - 用-c 或-u 而不是-e
  - 解释
  - 有益的注释
- 文件命名:项目前缀-版本号.{src,bin}.归档和压缩扩展名
- 健全检查
- README 拼写检查
- 打包文件解包到单一文件下
- 提供效验和
- 交流
* Futures




